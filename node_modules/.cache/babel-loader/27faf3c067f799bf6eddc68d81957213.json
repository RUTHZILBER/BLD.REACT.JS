{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\BLD.REACT.JS\\\\src\\\\CollapsibleTable.js\",\n    _s = $RefreshSig$();\n\n//הטבלה\nimport React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { connect } from 'react-redux';\nimport Table_Row from './Table_Row.js';\nimport './CollapsibleTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction mapStateToProps(state) {\n  return {\n    userId: state.UserId,\n    comment: state.Comment,\n    songList: state.SongList\n  };\n}\n\nexport default connect(mapStateToProps)(_s(function CollapsibleTable(props) {\n  _s();\n\n  const {\n    text,\n    setText,\n    userId,\n    comment,\n    dispatch,\n    songList,\n    songListseverity,\n    severity,\n    setSeverity,\n    alertContent,\n    setAlertContent,\n    errorPlay,\n    setErrorPlay\n  } = props;\n  const [songListToShow, setSongListToShow] = useState(songList);\n\n  function getTagsSong() {\n    //קבלת כל השירים לטבלה\n    var val = String(userId);\n    var jsonObj = JSON.stringify({\n      texts: val\n    });\n    fetch(\"http://localhost:62135/api/values/getTableInform\", {\n      method: \"post\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonObj\n    }).then(res => res.json()).then(res => {\n      if (res.Status) {\n        debugger;\n\n        if (songList.length == 0) {\n          //כאשר זו הפעם הראשונה, יש לפלטר את רשימת השירים\n          // ולמלא את רשומות הטבלה וכן את התגיות, אך מלוי התגיות \n          //בפונקציה המשתמשת במשתנים המוצהרים בקומפוננטה אחרת\n          dispatch({\n            type: 'SET_SONG_LIST',\n            payload: res.Data\n          }); // insteade of: 5 lines  filterSong();\n\n          var res = res.Data.filter(rows => rows.userId == userId && comment == \"private\" || (rows.isPermit == true || rows.userId == userId) && comment == \"all\");\n          setSongListToShow(res);\n        } else dispatch({\n          type: 'SET_SONG_LIST',\n          payload: res.Data\n        });\n      }\n    }, err => {});\n  } // בפעם הראשונה יש לשלף את כל השירים מהדטה בייס.\n\n\n  useEffect(() => {\n    getTagsSong();\n  }, []); // בכל שנוי של המתג (מצב השירים פרטי או גלובלי) יש לפלטר את רשימת השירים מחדש\n\n  useEffect(() => {\n    filterSong();\n  }, [comment]); //פילטור השירים מתוך רשימת השירים שנשלפו עבור המשתמש מבסיס הנתונים, אם רק את שלו או גם את של רעיו\n\n  function filterSong() {\n    debugger;\n    var res = songList.filter(rows => rows.userId == userId && comment == \"private\" || (rows.isPermit == true || rows.userId == userId) && comment == \"all\");\n    setSongListToShow(res);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"collapsible table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \"\\u05DE\\u05E1\\u05E4\\u05E8 \\u05D4\\u05EA\\u05D2\\u05D9\\u05D5\\u05EA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \"\\u05EA\\u05D2\\u05D9\\u05EA \\u05E0\\u05E4\\u05D5\\u05E6\\u05D4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \"\\u05EA\\u05D2\\u05D9\\u05EA \\u05DE\\u05E9\\u05E0\\u05D4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \"\\u05EA\\u05D2\\u05D9\\u05EA  \\u05E8\\u05D0\\u05E9\\u05D9\\u05EA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \" \\u05D4\\u05E8\\u05E9\\u05D0\\u05D4 \\u05DC\\u05E9\\u05D9\\u05EA\\u05D5\\u05E3 \\u05D1\\u05DE\\u05D0\\u05D2\\u05E8 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              align: \"right\",\n              children: \"\\u05DE\\u05E9\\u05EA\\u05DE\\u05E9 \\u05E9\\u05D4\\u05E2\\u05DC\\u05D4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              children: \"\\u05E9\\u05DD \\u05D4\\u05E9\\u05D9\\u05E8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"niceFont\",\n              style: {\n                display: \"none\"\n              },\n              align: \"right\",\n              children: \"\\u05DE\\u05D6\\u05D4\\u05D4 \\u05D4\\u05E9\\u05D9\\u05E8 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          className: \"niceFont\",\n          children: songListToShow.map(row => /*#__PURE__*/_jsxDEV(Table_Row, {\n            className: \"niceFont\",\n            severity: severity,\n            setSeverity: setSeverity,\n            alertContent: alertContent,\n            setAlertContent: setAlertContent,\n            errorPlay: errorPlay,\n            setErrorPlay: setErrorPlay,\n            row: row,\n            text: text,\n            setText: setText\n          }, row.songId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}, \"DAiPzEeGTls0LpRbRmXWi0+xkiA=\"));","map":{"version":3,"sources":["C:/git/BLD.REACT.JS/src/CollapsibleTable.js"],"names":["React","useEffect","useState","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","connect","Table_Row","mapStateToProps","state","userId","UserId","comment","Comment","songList","SongList","CollapsibleTable","props","text","setText","dispatch","songListseverity","severity","setSeverity","alertContent","setAlertContent","errorPlay","setErrorPlay","songListToShow","setSongListToShow","getTagsSong","val","String","jsonObj","JSON","stringify","texts","fetch","method","headers","body","then","res","json","Status","length","type","payload","Data","filter","rows","isPermit","err","filterSong","display","map","row","songId"],"mappings":"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","sourcesContent":["//הטבלה\r\nimport React, { useEffect, useState } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { connect } from 'react-redux';\r\nimport Table_Row from './Table_Row.js';\r\nimport './CollapsibleTable.css';\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userId: state.UserId,\r\n    comment: state.Comment,\r\n    songList: state.SongList\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(function CollapsibleTable(props) {\r\n\r\n  const { text, setText, userId, comment, dispatch, songList, songListseverity, severity, setSeverity, alertContent, setAlertContent, errorPlay, setErrorPlay } = props;\r\n  const [songListToShow, setSongListToShow] = useState(songList);\r\n\r\n\r\n\r\n  function getTagsSong() {//קבלת כל השירים לטבלה\r\n    var val = String(userId);\r\n    var jsonObj = JSON.stringify({ texts: val });\r\n\r\n    fetch(\"http://localhost:62135/api/values/getTableInform\", {\r\n      method: \"post\",\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: jsonObj\r\n    })\r\n\r\n      .then(res => res.json())\r\n      .then((res) => {\r\n        if (res.Status) {\r\n          debugger;\r\n          if (songList.length == 0) {\r\n            //כאשר זו הפעם הראשונה, יש לפלטר את רשימת השירים\r\n            // ולמלא את רשומות הטבלה וכן את התגיות, אך מלוי התגיות \r\n            //בפונקציה המשתמשת במשתנים המוצהרים בקומפוננטה אחרת\r\n            dispatch({ type: 'SET_SONG_LIST', payload: res.Data });\r\n            // insteade of: 5 lines  filterSong();\r\n\r\n            var res = res.Data.filter(\r\n              rows =>\r\n              (\r\n                (rows.userId == userId && comment == \"private\") ||\r\n                ((rows.isPermit == true || rows.userId == userId) && comment == \"all\")\r\n              )\r\n            );\r\n            setSongListToShow(res);\r\n\r\n          }\r\n          else\r\n            dispatch({ type: 'SET_SONG_LIST', payload: res.Data });\r\n\r\n\r\n        }\r\n\r\n      },\r\n        (err) => {\r\n\r\n        })\r\n\r\n  }\r\n\r\n  // בפעם הראשונה יש לשלף את כל השירים מהדטה בייס.\r\n  useEffect(() => {\r\n    getTagsSong();\r\n  },\r\n    []\r\n  );\r\n  // בכל שנוי של המתג (מצב השירים פרטי או גלובלי) יש לפלטר את רשימת השירים מחדש\r\n  useEffect(() => {\r\n    filterSong();\r\n  },\r\n    [comment]\r\n  );\r\n\r\n  //פילטור השירים מתוך רשימת השירים שנשלפו עבור המשתמש מבסיס הנתונים, אם רק את שלו או גם את של רעיו\r\n  function filterSong() {\r\n    debugger;\r\n\r\n    var res = songList.filter(\r\n      rows =>\r\n      (\r\n        (rows.userId == userId && comment == \"private\") ||\r\n        ((rows.isPermit == true || rows.userId == userId) && comment == \"all\")\r\n      )\r\n    )\r\n    setSongListToShow(res);\r\n  }\r\n\r\n  return (\r\n\r\n    <>\r\n\r\n      <TableContainer component={Paper}>\r\n\r\n        <Table aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <TableRow >\r\n              <TableCell />\r\n              {/* כותרות הטבלה */}\r\n\r\n              <TableCell className=\"niceFont\" align=\"right\">מספר התגיות</TableCell>\r\n              <TableCell className=\"niceFont\"  align=\"right\">תגית נפוצה</TableCell>\r\n              <TableCell className=\"niceFont\"  align=\"right\">תגית משנה</TableCell>\r\n              <TableCell className=\"niceFont\"  align=\"right\">תגית  ראשית</TableCell>\r\n              <TableCell className=\"niceFont\"  align=\"right\"> הרשאה לשיתוף במאגר </TableCell>\r\n              <TableCell className=\"niceFont\"  align=\"right\">משתמש שהעלה</TableCell>\r\n              <TableCell className=\"niceFont\" >שם השיר</TableCell>\r\n              <TableCell  className=\"niceFont\"  style={{ display: \"none\" }} align=\"right\">מזהה השיר </TableCell>\r\n              \r\n            </TableRow>\r\n          </TableHead>\r\n          {/* הצגת גוף הטבלה, ע\"י מפוי רשימת השירים המפולטרת */}\r\n          <TableBody  className=\"niceFont\" >\r\n            {songListToShow.map((row) => (\r\n              <Table_Row  className=\"niceFont\"  severity={severity} setSeverity={setSeverity} alertContent={alertContent} setAlertContent={setAlertContent} errorPlay={errorPlay} setErrorPlay={setErrorPlay} key={row.songId} row={row} text={text} setText={setText} />\r\n            ))\r\n            }\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n})"]},"metadata":{},"sourceType":"module"}