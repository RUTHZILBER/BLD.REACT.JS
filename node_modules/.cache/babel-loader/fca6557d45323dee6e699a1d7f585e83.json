{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\r\n * @ignore - internal component.\r\n */\n\nfunction Ripple(props) {\n  const {\n    className,\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: childClassName\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  in: PropTypes.bool,\n\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\n  onExited: PropTypes.func,\n\n  /**\r\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\r\n   */\n  pulsate: PropTypes.bool,\n\n  /**\r\n   * Diameter of the ripple.\r\n   */\n  rippleSize: PropTypes.number,\n\n  /**\r\n   * Horizontal position of the ripple center.\r\n   */\n  rippleX: PropTypes.number,\n\n  /**\r\n   * Vertical position of the ripple center.\r\n   */\n  rippleY: PropTypes.number,\n\n  /**\r\n   * exit delay\r\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;","map":{"version":3,"sources":["C:/GITHUB_PROJECTS/מחשב נייד 9.jpg/node_modules/@material-ui/core/ButtonBase/Ripple.js"],"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","Ripple","props","className","classes","pulsate","rippleX","rippleY","rippleSize","in","inProp","onExited","timeout","leaving","setLeaving","useState","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","createElement","style","process","env","NODE_ENV","propTypes","object","isRequired","string","bool","func","number"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport useEventCallback from '../utils/useEventCallback';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\n/**\r\n * @ignore - internal component.\r\n */\r\n\r\nfunction Ripple(props) {\r\n  const {\r\n    className,\r\n    classes,\r\n    pulsate = false,\r\n    rippleX,\r\n    rippleY,\r\n    rippleSize,\r\n    in: inProp,\r\n    onExited = () => {},\r\n    timeout\r\n  } = props;\r\n  const [leaving, setLeaving] = React.useState(false);\r\n  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\r\n  const rippleStyles = {\r\n    width: rippleSize,\r\n    height: rippleSize,\r\n    top: -(rippleSize / 2) + rippleY,\r\n    left: -(rippleSize / 2) + rippleX\r\n  };\r\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\r\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\r\n\r\n  useEnhancedEffect(() => {\r\n    if (!inProp) {\r\n      // react-transition-group#onExit\r\n      setLeaving(true); // react-transition-group#onExited\r\n\r\n      const timeoutId = setTimeout(handleExited, timeout);\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }, [handleExited, inProp, timeout]);\r\n  return /*#__PURE__*/React.createElement(\"span\", {\r\n    className: rippleClassName,\r\n    style: rippleStyles\r\n  }, /*#__PURE__*/React.createElement(\"span\", {\r\n    className: childClassName\r\n  }));\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\r\n  in: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore - injected from TransitionGroup\r\n   */\r\n  onExited: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\r\n   */\r\n  pulsate: PropTypes.bool,\r\n\r\n  /**\r\n   * Diameter of the ripple.\r\n   */\r\n  rippleSize: PropTypes.number,\r\n\r\n  /**\r\n   * Horizontal position of the ripple center.\r\n   */\r\n  rippleX: PropTypes.number,\r\n\r\n  /**\r\n   * Vertical position of the ripple center.\r\n   */\r\n  rippleY: PropTypes.number,\r\n\r\n  /**\r\n   * exit delay\r\n   */\r\n  timeout: PropTypes.number.isRequired\r\n} : void 0;\r\nexport default Ripple;"]},"metadata":{},"sourceType":"module"}